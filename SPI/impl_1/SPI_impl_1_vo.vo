
// Verilog netlist produced by program backanno, Version Radiant Software (64-bit) 2.2.1.239.2

// backanno -o SPI_impl_1_vo.vo -sp High-Performance_1.2V -w -neg -gui SPI_impl_1.udb 
// Netlist created on Tue May  4 16:03:49 2021
// Netlist written on Tue May  4 16:03:52 2021
// Design is for device iCE40UP5K
// Design is for package SG48
// Design is for performance grade High-Performance_1.2V

`timescale 1 ns / 1 ps

module peripheral ( led_array, CIPO, led, data_ready, reset, controller_clk, 
                    COPI, CS );
  input  reset, controller_clk, COPI, CS;
  output [7:0] led_array;
  output CIPO, led, data_ready;
  wire   n582, n488, \byte_counter[0] , \bit_counter[3] , n318, n340, 
         \byte_counter[1] , n2, \s[0] , n495, reset_c, clk, n498, n500, 
         led_array_c_3, CS_c, led_array_c_4, n314, led_array_c_2, n496, n484, 
         led_array_c_1, led_array_c_0, n12, controller_clk_last, 
         \bit_counter[0] , controller_clk_last_last, n490, n492, 
         \byte_counter[2] , n4, n6, \byte_counter[3] , 
         \s[0].sig_000.FeedThruLUT , n480, n481, CIPO_c, n880, n517, \s[1] , 
         clk_enable_2, n849, n516, n504, n502, led_array_c_6, led_array_c_5, 
         n508, n506, COPI_c, led_array_c_7, n512, n510, \bit_counter[2] , 
         \bit_counter[1] , n514, n8, n922, n471, n12_adj_1, \byte_counter[4] , 
         n494, read_spi, led_c, VCC_net, 
         \controller_clk_last.sig_001.FeedThruLUT , clk_enable_1, 
         controller_clk_c, data_ready_c;

  SLICE_0 SLICE_0( .DI1(n582), .DI0(n488), .D1(\byte_counter[0] ), 
    .C1(\bit_counter[3] ), .B1(n318), .A1(n340), .D0(\byte_counter[1] ), 
    .C0(n2), .B0(\s[0] ), .A0(n318), .CE(n495), .LSR(reset_c), .CLK(clk), 
    .Q0(\byte_counter[1] ), .Q1(\byte_counter[0] ), .F0(n488), .F1(n582));
  SLICE_1 SLICE_1( .DI1(n498), .DI0(n500), .C1(led_array_c_3), .A1(CS_c), 
    .D0(led_array_c_4), .B0(CS_c), .CE(n314), .LSR(reset_c), .CLK(clk), 
    .Q0(led_array_c_3), .Q1(led_array_c_2), .F0(n500), .F1(n498));
  SLICE_3 SLICE_3( .DI1(n496), .DI0(n484), .B1(led_array_c_2), .A1(CS_c), 
    .D0(CS_c), .A0(led_array_c_1), .CE(n314), .LSR(reset_c), .CLK(clk), 
    .Q0(led_array_c_0), .Q1(led_array_c_1), .F0(n484), .F1(n496));
  SLICE_5 SLICE_5( .DI0(n12), .D0(controller_clk_last), .C0(\bit_counter[0] ), 
    .B0(controller_clk_last_last), .A0(CS_c), .LSR(reset_c), .CLK(clk), 
    .Q0(\bit_counter[0] ), .F0(n12));
  SLICE_8 SLICE_8( .DI1(n490), .DI0(n492), .D1(\byte_counter[2] ), .C1(n318), 
    .B1(n4), .A1(\s[0] ), .D0(\s[0] ), .C0(n6), .B0(n318), 
    .A0(\byte_counter[3] ), .CE(n495), .LSR(reset_c), .CLK(clk), 
    .Q0(\byte_counter[3] ), .Q1(\byte_counter[2] ), .F0(n492), .F1(n490));
  SLICE_10 SLICE_10( .DI0(\s[0].sig_000.FeedThruLUT ), .D0(\s[0] ), .CE(n480), 
    .LSR(n481), .CLK(clk), .Q0(CIPO_c), .F0(\s[0].sig_000.FeedThruLUT ));
  SLICE_11 SLICE_11( .DI1(n880), .DI0(n517), .D1(\s[1] ), .C1(clk_enable_2), 
    .B1(n849), .D0(n516), .C0(n849), .B0(clk_enable_2), .A0(\s[1] ), .CLK(clk), 
    .Q0(\s[0] ), .Q1(\s[1] ), .F0(n517), .F1(n880));
  SLICE_13 SLICE_13( .DI1(n504), .DI0(n502), .C1(CS_c), .A1(led_array_c_6), 
    .D0(led_array_c_5), .B0(CS_c), .CE(n314), .LSR(reset_c), .CLK(clk), 
    .Q0(led_array_c_4), .Q1(led_array_c_5), .F0(n502), .F1(n504));
  SLICE_16 SLICE_16( .DI1(n508), .DI0(n506), .D1(COPI_c), .A1(CS_c), 
    .C0(led_array_c_7), .B0(CS_c), .CE(n314), .LSR(reset_c), .CLK(clk), 
    .Q0(led_array_c_6), .Q1(led_array_c_7), .F0(n506), .F1(n508));
  SLICE_18 SLICE_18( .DI1(n512), .DI0(n510), .D1(\bit_counter[2] ), 
    .C1(\bit_counter[1] ), .B1(\bit_counter[0] ), .A1(CS_c), 
    .D0(\bit_counter[1] ), .B0(CS_c), .A0(\bit_counter[0] ), .CE(n314), 
    .LSR(reset_c), .CLK(clk), .Q0(\bit_counter[1] ), .Q1(\bit_counter[2] ), 
    .F0(n510), .F1(n512));
  SLICE_20 SLICE_20( .DI0(n514), .D0(n340), .B0(CS_c), .A0(\bit_counter[3] ), 
    .CE(n314), .LSR(reset_c), .CLK(clk), .Q0(\bit_counter[3] ), .F0(n514));
  SLICE_21 SLICE_21( .C1(n6), .B1(\byte_counter[3] ), .A1(\s[0] ), .D0(\s[0] ), 
    .C0(n2), .B0(\byte_counter[1] ), .A0(\byte_counter[2] ), .F0(n6), .F1(n8));
  SLICE_23 SLICE_23( .D1(\bit_counter[3] ), .C1(n340), .B1(\byte_counter[0] ), 
    .A1(\s[0] ), .D0(\bit_counter[1] ), .B0(\bit_counter[2] ), 
    .A0(\bit_counter[0] ), .F0(n340), .F1(n2));
  SLICE_24 SLICE_24( .D1(\byte_counter[0] ), .C1(\byte_counter[2] ), 
    .B1(\byte_counter[3] ), .A1(\byte_counter[1] ), .D0(\byte_counter[1] ), 
    .B0(\s[0] ), .A0(n2), .F0(n4), .F1(n922));
  SLICE_25 SLICE_25( .D1(n471), .C1(n12_adj_1), .B1(\s[0] ), 
    .A1(\byte_counter[3] ), .D0(\byte_counter[1] ), .C0(\s[1] ), 
    .B0(\byte_counter[2] ), .A0(\byte_counter[0] ), .F0(n12_adj_1), .F1(n516));
  SLICE_26 SLICE_26( .D1(\byte_counter[4] ), .C1(clk_enable_2), 
    .D0(controller_clk_last_last), .C0(reset_c), .B0(controller_clk_last), 
    .A0(CS_c), .F0(clk_enable_2), .F1(n471));
  SLICE_28 SLICE_28( .DI1(n494), .D1(n8), .C1(n318), .B1(\s[0] ), 
    .A1(\byte_counter[4] ), .D0(clk_enable_2), .C0(n922), 
    .B0(\byte_counter[4] ), .A0(\s[0] ), .CE(n495), .LSR(reset_c), .CLK(clk), 
    .Q1(\byte_counter[4] ), .F0(n849), .F1(n494));
  SLICE_29 SLICE_29( .D1(CS_c), .C1(read_spi), .B1(\s[0] ), .A1(\s[1] ), 
    .C0(controller_clk_last), .A0(controller_clk_last_last), .F0(read_spi), 
    .F1(n495));
  SLICE_31 SLICE_31( .D1(\s[1] ), .C1(clk_enable_2), .A1(\s[0] ), .D0(\s[0] ), 
    .B0(clk_enable_2), .A0(\s[1] ), .F0(n481), .F1(n480));
  SLICE_34 SLICE_34( .D1(\s[0] ), .C1(\s[1] ), .D0(\s[1] ), .C0(\s[0] ), 
    .B0(CS_c), .A0(read_spi), .F0(n318), .F1(led_c));
  SLICE_35 SLICE_35( .F0(VCC_net));
  SLICE_38 SLICE_38( .DI1(\controller_clk_last.sig_001.FeedThruLUT ), 
    .A1(controller_clk_last), .D0(controller_clk_last), .C0(CS_c), 
    .B0(controller_clk_last_last), .CE(clk_enable_1), .CLK(clk), 
    .Q1(controller_clk_last_last), .F0(n314), 
    .F1(\controller_clk_last.sig_001.FeedThruLUT ));
  SLICE_39 SLICE_39( .C0(reset_c), .F0(clk_enable_1));
  controller_clk_last_c controller_clk_last_c( .PADDI(controller_clk_c), 
    .CE(clk_enable_1), .INCLK(clk), .DI0(controller_clk_last));
  H H( .CLKHFPU(VCC_net), .CLKHFEN(VCC_net), .CLKHF(clk));
  data_ready_i1 data_ready_i1( .DO0(\s[0] ), .CE(clk_enable_2), .OUTCLK(clk), 
    .PADDO(data_ready_c));
  led_array_4_ \led_array[4]_I ( .PADDO(led_array_c_4), 
    .ledarray4(led_array[4]));
  led_array_5_ \led_array[5]_I ( .PADDO(led_array_c_5), 
    .ledarray5(led_array[5]));
  led_array_7_ \led_array[7]_I ( .PADDO(led_array_c_7), 
    .ledarray7(led_array[7]));
  led_array_6_ \led_array[6]_I ( .PADDO(led_array_c_6), 
    .ledarray6(led_array[6]));
  led_array_3_ \led_array[3]_I ( .PADDO(led_array_c_3), 
    .ledarray3(led_array[3]));
  led_array_2_ \led_array[2]_I ( .PADDO(led_array_c_2), 
    .ledarray2(led_array[2]));
  led_array_1_ \led_array[1]_I ( .PADDO(led_array_c_1), 
    .ledarray1(led_array[1]));
  led_array_0_ \led_array[0]_I ( .PADDO(led_array_c_0), 
    .ledarray0(led_array[0]));
  CIPO CIPO_I( .PADDO(CIPO_c), .CIPO(CIPO));
  led led_I( .PADDO(led_c), .led(led));
  data_ready data_ready_I( .PADDO(data_ready_c), .data_ready(data_ready));
  reset reset_I( .PADDI(reset_c), .reset(reset));
  controller_clk controller_clk_I( .PADDI(controller_clk_c), 
    .controller_clk(controller_clk));
  COPI COPI_I( .PADDI(COPI_c), .COPI(COPI));
  CS CS_I( .PADDI(CS_c), .CS(CS));
endmodule

module SLICE_0 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, LSR, CLK, 
    output Q0, Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut4 i761_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40001 i382_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 byte_counter__i0( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 byte_counter__i1( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  LUT4 #("0x3102") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40001 ( input A, B, C, D, output Z );

  LUT4 #("0x4114") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module ffsre2 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "ASYNC";
endmodule

module SLICE_1 ( input DI1, DI0, C1, A1, D0, B0, CE, LSR, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40002 i392_2_lut( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40003 i393_2_lut( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 byte_shiftreg__i3( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 byte_shiftreg__i4( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40002 ( input A, B, C, D, output Z );

  LUT4 #("0x5050") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module lut40003 ( input A, B, C, D, output Z );

  LUT4 #("0x3300") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_3 ( input DI1, DI0, B1, A1, D0, A0, CE, LSR, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40004 i391_2_lut( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40005 i376_2_lut( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 byte_shiftreg__i2( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 byte_shiftreg__i1( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40004 ( input A, B, C, D, output Z );

  LUT4 #("0x4444") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40005 ( input A, B, C, D, output Z );

  LUT4 #("0x00AA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_5 ( input DI0, D0, C0, B0, A0, LSR, CLK, output Q0, F0 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40006 i380_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 bit_counter__i0( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  LUT4 #("0x4150") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module SLICE_8 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, LSR, CLK, 
    output Q0, Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40007 i388_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40008 i389_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 byte_counter__i2( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 byte_counter__i3( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40007 ( input A, B, C, D, output Z );

  LUT4 #("0x0906") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40008 ( input A, B, C, D, output Z );

  LUT4 #("0x2112") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_10 ( input DI0, D0, CE, LSR, CLK, output Q0, F0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40009 SLICE_10_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre20010 CIPO_i0( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40009 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module ffsre20010 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "CE_OVER_LSR";
endmodule

module SLICE_11 ( input DI1, DI0, D1, C1, B1, D0, C0, B0, A0, CLK, output Q0, 
    Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40011 i12_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40012 i345_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre20010 s_i1( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre20010 s_i0( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40011 ( input A, B, C, D, output Z );

  LUT4 #("0x0FCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40012 ( input A, B, C, D, output Z );

  LUT4 #("0x2700") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_13 ( input DI1, DI0, C1, A1, D0, B0, CE, LSR, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40013 i395_2_lut( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40003 i394_2_lut( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 byte_shiftreg__i6( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 byte_shiftreg__i5( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40013 ( input A, B, C, D, output Z );

  LUT4 #("0x0A0A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_16 ( input DI1, DI0, D1, A1, C0, B0, CE, LSR, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40014 i397_2_lut( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 i396_2_lut( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 byte_shiftreg__i8( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 byte_shiftreg__i7( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40014 ( input A, B, C, D, output Z );

  LUT4 #("0x5500") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40015 ( input A, B, C, D, output Z );

  LUT4 #("0x3030") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_18 ( input DI1, DI0, D1, C1, B1, A1, D0, B0, A0, CE, LSR, CLK, 
    output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 i400_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 i398_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 bit_counter__i2( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  ffsre2 bit_counter__i1( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  LUT4 #("0x1540") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  LUT4 #("0x1122") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_20 ( input DI0, D0, B0, A0, CE, LSR, CLK, output Q0, F0 );
  wire   GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40018 i401_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 bit_counter__i3( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  LUT4 #("0x1122") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_21 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40019 i210_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 i203_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  LUT4 #("0xE8E8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  LUT4 #("0xFE80") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_23 ( input D1, C1, B1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40021 i189_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 i172_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  LUT4 #("0xAACA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  LUT4 #("0x8800") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_24 ( input D1, C1, B1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40023 i753_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40024 i196_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40024 ( input A, B, C, D, output Z );

  LUT4 #("0xEE88") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_25 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40025 i399_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 i5_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  LUT4 #("0xECCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40026 ( input A, B, C, D, output Z );

  LUT4 #("0x0800") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_26 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40027 i1_2_lut( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40028 i2_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  LUT4 #("0x00F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40028 ( input A, B, C, D, output Z );

  LUT4 #("0x0004") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_28 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, CE, LSR, CLK, 
    output Q1, F0, F1 );
  wire   DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40029 i390_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40030 i2_3_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 byte_counter__i4( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  LUT4 #("0x0906") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40030 ( input A, B, C, D, output Z );

  LUT4 #("0x0200") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_29 ( input D1, C1, B1, A1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40031 i763_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 controller_clk_last_I_11_2_lut( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  LUT4 #("0x00D0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40032 ( input A, B, C, D, output Z );

  LUT4 #("0x5050") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_31 ( input D1, C1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40033 i1_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 i309_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  LUT4 #("0xA0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40034 ( input A, B, C, D, output Z );

  LUT4 #("0x8800") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_34 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40035 i766_2_lut( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40036 i2_3_lut_4_lut_adj_1( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  LUT4 #("0x000F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40036 ( input A, B, C, D, output Z );

  LUT4 #("0x2000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_35 ( output F0 );
  wire   GNDI;

  lut40037 i2( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_38 ( input DI1, A1, D0, C0, B0, CE, CLK, output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly;

  lut40038 SLICE_38_K1( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 i150_2_lut_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre20010 controller_clk_last_last_c( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  LUT4 #("0xAAAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  LUT4 #("0xF3F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_39 ( input C0, output F0 );
  wire   GNDI;

  lut40040 i106_1_lut( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  LUT4 #("0x0F0F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module controller_clk_last_c ( input PADDI, CE, INCLK, output DI0 );
  wire   GNDI, PADDI_dly, INCLK_dly, CE_dly;

  IOL_B_B controller_clk_last_c_IOL_B( .PADDI(PADDI_dly), .DO1(GNDI), 
    .DO0(GNDI), .CE(CE_dly), .IOLTO(GNDI), .HOLD(GNDI), .INCLK(INCLK_dly), 
    .OUTCLK(GNDI), .PADDO(), .PADDT(), .DI1(), .DI0(DI0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (INCLK => DI0) = (0:0:0,0:0:0);
    $setuphold (posedge INCLK, PADDI, 0:0:0, 0:0:0,,,, INCLK_dly, PADDI_dly);
    $setuphold (posedge INCLK, CE, 0:0:0, 0:0:0,,,, INCLK_dly, CE_dly);
  endspecify

endmodule

module IOL_B_B ( input PADDI, DO1, DO0, CE, IOLTO, HOLD, INCLK, OUTCLK, 
    output PADDO, PADDT, DI1, DI0 );

  IOL_B INST10( .PADDI(PADDI), .DO1(DO1), .DO0(DO0), .CE(CE), .IOLTO(IOLTO), 
    .HOLD(HOLD), .INCLK(INCLK), .OUTCLK(OUTCLK), .PADDO(PADDO), .PADDT(PADDT), 
    .DI1(DI1), .DI0(DI0));
  defparam INST10.LATCHIN = "NONE_REG";
  defparam INST10.DDROUT = "NO";
endmodule

module H ( input CLKHFPU, CLKHFEN, output CLKHF );
  wire   GNDI;

  HSOSC_CORE_B H_HSOSC_CORE( .CLKHFPU(CLKHFPU), .CLKHFEN(CLKHFEN), 
    .TRIM9(GNDI), .TRIM8(GNDI), .TRIM7(GNDI), .TRIM6(GNDI), .TRIM5(GNDI), 
    .TRIM4(GNDI), .TRIM3(GNDI), .TRIM2(GNDI), .TRIM1(GNDI), .TRIM0(GNDI), 
    .CLKHF(CLKHF));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module HSOSC_CORE_B ( input CLKHFPU, CLKHFEN, TRIM9, TRIM8, TRIM7, TRIM6, 
    TRIM5, TRIM4, TRIM3, TRIM2, TRIM1, TRIM0, output CLKHF );

  HSOSC_CORE INST10( .CLKHFPU(CLKHFPU), .CLKHFEN(CLKHFEN), .TRIM9(TRIM9), 
    .TRIM8(TRIM8), .TRIM7(TRIM7), .TRIM6(TRIM6), .TRIM5(TRIM5), .TRIM4(TRIM4), 
    .TRIM3(TRIM3), .TRIM2(TRIM2), .TRIM1(TRIM1), .TRIM0(TRIM0), .CLKHF(CLKHF));
  defparam INST10.CLKHF_DIV = "0b00";
  defparam INST10.FABRIC_TRIME = "DISABLE";
endmodule

module data_ready_i1 ( input DO0, CE, OUTCLK, output PADDO );
  wire   GNDI, DO0_dly, OUTCLK_dly, CE_dly;

  IOL_B0041 data_ready_i1_IOL_B( .PADDI(GNDI), .DO1(GNDI), .DO0(DO0_dly), 
    .CE(CE_dly), .IOLTO(GNDI), .HOLD(GNDI), .INCLK(GNDI), .OUTCLK(OUTCLK_dly), 
    .PADDO(PADDO), .PADDT(), .DI1(), .DI0());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (OUTCLK => PADDO) = (0:0:0,0:0:0);
    $setuphold (posedge OUTCLK, DO0, 0:0:0, 0:0:0,,,, OUTCLK_dly, DO0_dly);
    $setuphold (posedge OUTCLK, CE, 0:0:0, 0:0:0,,,, OUTCLK_dly, CE_dly);
  endspecify

endmodule

module IOL_B0041 ( input PADDI, DO1, DO0, CE, IOLTO, HOLD, INCLK, OUTCLK, 
    output PADDO, PADDT, DI1, DI0 );

  IOL_B INST10( .PADDI(PADDI), .DO1(DO1), .DO0(DO0), .CE(CE), .IOLTO(IOLTO), 
    .HOLD(HOLD), .INCLK(INCLK), .OUTCLK(OUTCLK), .PADDO(PADDO), .PADDT(PADDT), 
    .DI1(DI1), .DI0(DI0));
  defparam INST10.LATCHIN = "LATCH_REG";
  defparam INST10.DDROUT = "NO";
endmodule

module led_array_4_ ( input PADDO, output ledarray4 );
  wire   VCCI;

  BB_B_B \led_array[4]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(ledarray4));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => ledarray4) = (0:0:0,0:0:0);
  endspecify

endmodule

module BB_B_B ( input T_N, I, output O, inout B );

  BB_B INST10( .T_N(T_N), .I(I), .O(O), .B(B));
endmodule

module led_array_5_ ( input PADDO, output ledarray5 );
  wire   VCCI;

  BB_B_B \led_array[5]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(ledarray5));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => ledarray5) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_array_7_ ( input PADDO, output ledarray7 );
  wire   VCCI;

  BB_B_B \led_array[7]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(ledarray7));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => ledarray7) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_array_6_ ( input PADDO, output ledarray6 );
  wire   VCCI;

  BB_B_B \led_array[6]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(ledarray6));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => ledarray6) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_array_3_ ( input PADDO, output ledarray3 );
  wire   VCCI;

  BB_B_B \led_array[3]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(ledarray3));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => ledarray3) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_array_2_ ( input PADDO, output ledarray2 );
  wire   VCCI;

  BB_B_B \led_array[2]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(ledarray2));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => ledarray2) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_array_1_ ( input PADDO, output ledarray1 );
  wire   VCCI;

  BB_B_B \led_array[1]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(ledarray1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => ledarray1) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_array_0_ ( input PADDO, output ledarray0 );
  wire   VCCI;

  BB_B_B \led_array[0]_BB_B ( .T_N(VCCI), .I(PADDO), .O(), .B(ledarray0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => ledarray0) = (0:0:0,0:0:0);
  endspecify

endmodule

module CIPO ( input PADDO, output CIPO );
  wire   VCCI;

  BB_B_B CIPO_BB_B( .T_N(VCCI), .I(PADDO), .O(), .B(CIPO));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => CIPO) = (0:0:0,0:0:0);
  endspecify

endmodule

module led ( input PADDO, output led );
  wire   VCCI;

  BB_B_B led_BB_B( .T_N(VCCI), .I(PADDO), .O(), .B(led));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => led) = (0:0:0,0:0:0);
  endspecify

endmodule

module data_ready ( input PADDO, output data_ready );
  wire   VCCI;

  BB_B_B data_ready_BB_B( .T_N(VCCI), .I(PADDO), .O(), .B(data_ready));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => data_ready) = (0:0:0,0:0:0);
  endspecify

endmodule

module reset ( output PADDI, input reset );
  wire   GNDI;

  BB_B_B reset_BB_B( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(reset));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (reset => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module controller_clk ( output PADDI, input controller_clk );
  wire   GNDI;

  BB_B_B controller_clk_BB_B( .T_N(GNDI), .I(GNDI), .O(PADDI), 
    .B(controller_clk));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (controller_clk => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module COPI ( output PADDI, input COPI );
  wire   GNDI;

  BB_B_B COPI_BB_B( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(COPI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (COPI => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module CS ( output PADDI, input CS );
  wire   GNDI;

  BB_B_B CS_BB_B( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(CS));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CS => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule
